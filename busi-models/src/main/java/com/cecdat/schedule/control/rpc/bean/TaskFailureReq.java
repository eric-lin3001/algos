//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.3
//
// <auto-generated>
//
// Generated from file `scheduler_control_airflow.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.cecdat.schedule.control.rpc.bean;

public class TaskFailureReq implements java.lang.Cloneable,
                                       java.io.Serializable
{
    public String taskId;

    public String getTaskId()
    {
        return taskId;
    }

    public void setTaskId(String taskId)
    {
        this.taskId = taskId;
    }

    public TaskFailureReq()
    {
        this.taskId = "";
    }

    public TaskFailureReq(String taskId)
    {
        this.taskId = taskId;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        TaskFailureReq r = null;
        if(rhs instanceof TaskFailureReq)
        {
            r = (TaskFailureReq)rhs;
        }

        if(r != null)
        {
            if(this.taskId != r.taskId)
            {
                if(this.taskId == null || r.taskId == null || !this.taskId.equals(r.taskId))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::rpc::bean::TaskFailureReq");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, taskId);
        return h_;
    }

    public TaskFailureReq clone()
    {
        TaskFailureReq c = null;
        try
        {
            c = (TaskFailureReq)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeString(this.taskId);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.taskId = istr.readString();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, TaskFailureReq v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public TaskFailureReq ice_read(com.zeroc.Ice.InputStream istr)
    {
        TaskFailureReq v = new TaskFailureReq();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<TaskFailureReq> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, TaskFailureReq v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<TaskFailureReq> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(TaskFailureReq.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final TaskFailureReq _nullMarshalValue = new TaskFailureReq();

    /** @hidden */
    public static final long serialVersionUID = -8567541637816077778L;
}
